@page "/"
@using NetworkEdition.ViewModels
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager

<div>
    <button class="btn btn-primary" @onclick="New">New</button>
</div>

<div class="card-columns">
    @foreach (var (id, name, _) in _networks)
    {
        <div class="card">
            <div class="card-header">
                @name
            </div>
            <div class="card-body">
                <button @onclick="() => Open(id)" class="btn btn-primary">Edit</button>
                <button @onclick="() => Delete(id)" class="btn btn-outline-danger">Delete</button>
            </div>
        </div>
    }
</div>

@code {

#nullable enable

    private Network[] _networks = Array.Empty<Network>();
    private HttpClient _client=new();

    protected override async Task OnInitializedAsync()
    {
        _client = ClientFactory.CreateClient("Backend");
        _networks = (await _client.GetFromJsonAsync<IEnumerable<Network>>("Networks")
                     ?? throw new Exception())
            .ToArray();

        await base.OnInitializedAsync();
    }

    private void Open(Guid id)
    {
        NavigationManager.NavigateTo($"{id}/Edit");
    }

    private async Task Delete(Guid id)
    {     
        await _client.DeleteAsync($"Networks/{id}");

        _networks = _networks.Where(x => x.Identity != id)
                             .ToArray();
    }

    private async Task New()
    {    
        var network = await _client.PostAsync<Network>("Networks");

        _networks = _networks.Append(network)
                             .ToArray();
    }

}