@page "/{NetworkId:guid}/Edit"
@using NetworkEdition.ViewModels
@inject IHttpClientFactory ClientFactory

<TextBox @bind-Value="@Name"/>

<div class="pb-3 shadow rounded highlight">
    <button @onclick="CreateRelay"
             class="btn btn-primary m-3 shadow">
        New relay
    </button>

    @foreach (var relay in _relays)
    {
        <div class="m-3 shadow rounded highlight">
            <div class="d-flex justify-content-between"
                 style="display: flex; align-items: center;">
                <div>
                    <h4 class="m-3">@relay.Name</h4>
                </div>
                <div>
                    <button class="btn btn-outline-danger m-3 shadow text-right"
                            @onclick="() => DeleteRelay(relay.Identity)">
                        Delete
                    </button>
                </div>
            </div>
            <div class="input-group input-group-lg px-3 my-3 rounded">
                <div class="input-group-prepend">
                    <div class="input-group-text ">X</div>
                </div>
                <input class="form-control" value="@relay.X">
            </div>
            <div class="input-group input-group-lg px-3 pb-3 my-3 rounded">
                <div class="input-group-prepend">
                    <div class="input-group-text ">Y</div>
                </div>
                <input class="form-control" value="@relay.Y">
            </div>
        </div>
    }
</div>

@code {

#nullable enable

    private HttpClient _client = new();

    private Network _network = new(Guid.Empty, "Unnamed network");
    private Relay[] _relays = Array.Empty<Relay>();

    [Parameter]
    public Guid NetworkId { get; set; }

    private string Name
    {
        get => _network.Name;
        set
        {
            _client.PutAsJsonAsync($"Networks/{NetworkId}", new NetworkProps(value));
            _network = _network with { Name = value };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _client = ClientFactory.CreateClient("Backend");

        _network = await _client.GetFromJsonAsync<Network>($"Networks/{NetworkId}")
                   ?? throw new Exception();
        _relays = (await _client.GetFromJsonAsync<IEnumerable<Relay>>($"Networks/{NetworkId}/Relays")
                   ?? throw new Exception()).ToArray();

        await base.OnInitializedAsync();
    }

    private async Task CreateRelay()
    {
        var relay = await _client.PostAsync<Relay>($"Networks/{NetworkId}/Relays");

        _relays = _relays.Append(relay).ToArray();
    }

    private async Task DeleteRelay(Guid relayId)
    {
        await _client.DeleteAsync($"Networks/{NetworkId}/Relays/{relayId}");

        _relays = _relays.Where(x => x.Identity != relayId).ToArray();
    }

}