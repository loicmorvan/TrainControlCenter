@page "/{NetworkId:guid}/Edit"
@using NetworkEdition.ViewModels
@using Relay = NetworkEdition.ViewModels.Relay
@inject IHttpClientFactory ClientFactory

<TextBox @bind-Value="@Name"/>

<div class="pb-3 shadow rounded">
    <button @onclick="CreateRelay"
             class="btn btn-primary m-3 shadow">
        New relay
    </button>

    @foreach (var relayId in _relayIds)
    {
        <div class="m-3 shadow rounded highlight">
            <Relay NetworkId="@NetworkId"
                   Id="@relayId"
                   OnDeleted="@OnRelayDeleted"/>
        </div>
    }
</div>

@code {

#nullable enable

    private HttpClient _client = new();

    private Network _network = new(Guid.Empty, "Unnamed network");
    private Guid[] _relayIds = Array.Empty<Guid>();

    [Parameter]
    public Guid NetworkId { get; set; }

    private string Name
    {
        get => _network.Name;
        set
        {
            _client.PutAsJsonAsync($"Networks/{NetworkId}", new NetworkProps(value));
            _network = _network with { Name = value };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _client = ClientFactory.CreateClient("Backend");

        _network = await _client.GetFromJsonAsync<Network>($"Networks/{NetworkId}") ?? throw new Exception();
        _relayIds = (await _client.GetFromJsonAsync<IEnumerable<Relay>>($"Networks/{NetworkId}/Relays") ?? throw new Exception())
            .Select(x => x.Identity)
            .ToArray();

        await base.OnInitializedAsync();
    }

    private async Task CreateRelay()
    {
        var relay = await _client.PostAsync<Relay>($"Networks/{NetworkId}/Relays");

        _relayIds = _relayIds.Append(relay.Identity).ToArray();
    }

    private void OnRelayDeleted(Guid deletedRelayId)
    {
        _relayIds = _relayIds.Where(x => x != deletedRelayId)
                         .ToArray();
    }

}