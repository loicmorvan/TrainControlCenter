@page "/{NetworkId:guid}/Edit"
@using NetworkEdition.ViewModels
@inject IHttpClientFactory ClientFactory

<TextBox @bind-Value="@Name"/>

<button @onclick="CreateRelay"
         class="btn btn-primary">
    New relay
</button>

@foreach (var relay in _relays)
{
    <div class="shadow">
        <h4>@relay.Name</h4>
        <button class="btn btn-outline-danger"
                @onclick="() => DeleteRelay(relay.Identity)">
            Delete
        </button>
    </div>
}

@code {

#nullable enable

    private HttpClient _client = new();

    private Network _network = new(Guid.Empty, "Unnamed network");
    private Relay[] _relays = Array.Empty<Relay>();

    [Parameter]
    public Guid NetworkId { get; set; }

    private string Name
    {
        get => _network.Name;
        set
        {
            _client.PutAsJsonAsync($"Networks/{NetworkId}", new NetworkProps(value));
            _network = _network with { Name = value };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _client = ClientFactory.CreateClient("Backend");

        _network = await _client.GetFromJsonAsync<Network>($"Networks/{NetworkId}")
                   ?? throw new Exception();
        _relays = (await _client.GetFromJsonAsync<IEnumerable<Relay>>($"Networks/{NetworkId}/Relays")
                   ?? throw new Exception()).ToArray();

        await base.OnInitializedAsync();
    }

    private async Task CreateRelay()
    {
        var relay = await _client.PostAsync<Relay>($"Networks/{NetworkId}/Relays");

        _relays = _relays.Append(relay).ToArray();
    }

    private async Task DeleteRelay(Guid relayId)
    {
        await _client.DeleteAsync($"Networks/{NetworkId}/Relays/{relayId}");

        _relays = _relays.Where(x => x.Identity != relayId).ToArray();
    }

}