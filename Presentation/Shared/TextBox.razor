<div class="input-group input-group-lg mb-3 shadow rounded">

    @if (_editing)
    {
        <input type="text"
               class="form-control text-center"
               placeholder="Network name"
               autofocus
               @bind-value="@_editedValue"
               @oninput="OnInputTextChanged"
               @onkeyup="OnKeyUp">

        @if (_editedValue != Value &&
             !string.IsNullOrEmpty(_editedValue))
        {
            <div class="input-group-append">
                <button class="btn btn-outline-success"
                        @onclick="Accept">
                    <span class="oi oi-check"></span>
                </button>
            </div>

            <div class="input-group-append">
                <button class="btn btn-outline-danger"
                        @onclick="Cancel">
                    <span class="oi oi-x"></span>
                </button>
            </div>
        }
    }
    else
    {
        <button class="form-control"
                @onclick="Edit">
            @_value
        </button>
    }

</div>

@code {

#nullable enable

    private bool _editing = false;
    private string _editedValue = string.Empty;
    private string _value = string.Empty;

    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            _value = value;
            _editedValue = value;
        }
    }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private async Task Accept()
    {
        _value = _editedValue.Trim();
        _editing = false;

        await ValueChanged.InvokeAsync(Value);
    }

    private void Cancel()
    {
        _editedValue = _value;
        _editing = false;
    }

    private async Task OnKeyUp(KeyboardEventArgs arg)
    {
        switch (arg.Key)
        {
            case "Enter":
                await Accept();
                break;
            case "Escape":
                Cancel();
                break;
        }
    }

    private void OnInputTextChanged(ChangeEventArgs arg)
    {
        _editedValue = (string) arg.Value!;
    }

    private void Edit()
    {
        _editedValue = _value;
        _editing = true;
    }

}