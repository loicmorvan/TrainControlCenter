<div class="input-group mb-3">

    <div class="input-group-prepend">
        <span class="input-group-text">
            <span class="oi oi-file"></span>
        </span>
    </div>

    @if (_editing)
    {
        <input type="text"
               class="form-control"
               placeholder="Unnamed network"
               autofocus
               @bind-value="@_value"
               @onkeyup="OnKeyUp">

        <div class="input-group-append">
            <button class="btn btn-outline-success"
                    @onclick="Accept">
                <span class="oi oi-check"></span>
            </button>
        </div>

        <div class="input-group-append">
            <button class="btn btn-outline-danger"
                    @onclick="Cancel">
                <span class="oi oi-x"></span>
            </button>
        </div>
    }
    else
    {
        <span class="form-control"
              @onclick="OnClick"
              style="cursor: pointer;">
            @Value
        </span>
    }

</div>

@code {

#nullable enable

    private bool _editing;
    private string _value = string.Empty;

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private async Task Accept()
    {
        Value = _value;
        _editing = false;

        await ValueChanged.InvokeAsync(Value);
    }

    private void Cancel()
    {
        _editing = false;
    }

    private async Task OnKeyUp(KeyboardEventArgs arg)
    {
        switch (arg.Key)
        {
            case "Enter":
                await Accept();
                break;
            case "Escape":
                Cancel();
                break;
        }
    }

    private void OnClick()
    {
        _value = Value;
        _editing = true;
    }

}